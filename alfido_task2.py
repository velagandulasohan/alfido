# -*- coding: utf-8 -*-
"""Alfido_task2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1krQI_VLEs1R3n5LXnS37SUKBnntSdYqz
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

movies = pd.read_csv(r"/content/movies.csv", sep='::', engine='python', encoding='latin1',names = ['MovieID','Title','Genre'])
ratings = pd.read_csv(r"/content/ratings.csv",sep='::', engine='python',encoding='latin1')
ratings.columns =['UserID', 'MovieID', 'Rating', 'Timestamp']
users = pd.read_csv(r"/content/users.csv",sep='::',engine='python',encoding='latin1')
users.columns =['UserID', 'Gender', 'Age', 'Occupation', 'Zip-code']

movies.head()

users.head()

ratings.head()

movies['Year'] = movies.Title.str.extract('(\(\d\d\d\d\))',expand=False)
movies['Year'] = movies.Year.str.extract('(\d\d\d\d)',expand=False)
movies['Title'] = movies.Title.str.replace('(\(\d\d\d\d\))', '')
movies['Title'] = movies['Title'].apply(lambda x: x.strip())
movies['Genre'] = movies.Genre.str.split('|')
movies.head()

movies_genres = movies.copy()
for i, row in movies.iterrows():
    for genre in row['Genre']:
        movies_genres.at[i, genre] = 1
movies_genres = movies_genres.fillna(0)
movies_genres.head()

import random
user = random.choice(ratings['UserID'])
print("User ID: ", user)

user_input = ratings[ratings['UserID'] == user].reset_index(drop=True)
user_input

input_movies = movies[movies['MovieID'].isin(user_input['MovieID'].tolist())]
user_input = pd.merge(input_movies, user_input)
user_input = user_input.drop('Genre',axis= 1).drop('Year', axis=1).drop('UserID',axis= 1)
user_input

user_movies = movies_genres[movies_genres['MovieID'].isin(user_input['MovieID'].tolist())]
user_movies

user_movies = user_movies.reset_index(drop=True)
user_genres = user_movies.drop('MovieID', axis=1).drop('Title',axis= 1).drop('Genre',axis= 1).drop('Year',axis= 1)
user_genres.head()

user_profile = user_genres.transpose().dot(user_input['Rating'])
user_profile

genre_table = movies_genres.set_index(movies_genres['MovieID'])
genre_table = genre_table.drop('MovieID',axis= 1).drop('Title',axis= 1).drop('Genre', axis=1).drop('Year',axis=1)
genre_table.head()

recommendations_df = ((genre_table*user_profile).sum(axis=1))/(user_profile.sum())
recommendations_df.head()

recommendations_df = recommendations_df.sort_values(ascending=False)
recommendations_df.head()

df = movies.loc[~movies['MovieID'].isin(user_input.MovieID)].reset_index(drop=True)
df.loc[df['MovieID'].isin(recommendations_df.head(20).keys())].reset_index(drop=True)